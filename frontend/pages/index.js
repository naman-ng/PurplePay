import Head from 'next/head';
import Image from 'next/image';
import { ConnectButton } from '@rainbow-me/rainbowkit';
import Link from 'next/link';
import { useAccount, useSigner, useProvider } from 'wagmi';
import { useState, useEffect } from 'react';
import logo from '../public/logo.png';
import { BigNumber, ethers } from 'ethers';
import { PurplePay_Address, PurplePay_ABI } from '@/constant';
import Spinner from '@/components/Spinner';

export default function Home() {
  const { address } = useAccount();
  const { data: signer } = useSigner();
  const provider = useProvider();
  const [isConnected, setIsConnected] = useState(false);
  const [custom, setCustom] = useState(false);
  const [amount, setAmount] = useState('');
  const [inputAddress, setInputAddress] = useState('');
  const [loading, setLoading] = useState(false);
  const [admin, setAdmin] = useState('');
  const [balance, setBalance] = useState(0);
  const [tokenAddress, setTokenAddress] = useState('');
  const [adminFeePercentage, setAdminFeePercentage] = useState(0);
  const [totalFeeCollected, setTotalFeeCollected] = useState('');

  const purplePayContract = new ethers.Contract(PurplePay_Address, PurplePay_ABI, signer || provider);

  const getAdmin = async () => {
    setLoading(true);
    const admin = await purplePayContract.getAdmin();
    setAdmin(admin);
    setLoading(false);
  };

  const getAdminFeePercentage = async () => {
    let balance = await purplePayContract.getAdminFeePercentage();
    // balance = BigNumber.from(balance).divided().toNumber();
    balance = String(balance);
    setAdminFeePercentage(balance);
  };

  const getTotalFeeCollected = async () => {
    const totalFeeCollected = await purplePayContract.getTotalFeeCollected();
    setTotalFeeCollected(totalFeeCollected);
  };

  const withdrawFunds = async () => {
    setLoading(true);
    const tx = await purplePayContract.withdraw(inputAddress, amount);
    await tx.wait();
    setLoading(false);
  };

  const depositFunds = async () => {
    setLoading(true);
    const tx = await purplePayContract.deposit(inputAddress, amount);
    await tx.wait();
    setLoading(false);
  };

  const changeAdmin = async () => {
    setLoading(true);
    const tx = await purplePayContract.setAdmin(inputAddress);
    await tx.wait();
    setLoading(false);
  };

  const changeAdminFeePercentage = async () => {
    setLoading(true);
    const tx = await purplePayContract.setAdminFeePercentage(amount);
    await tx.wait();
    setLoading(false);
  };

  useEffect(() => {
    if (address) {
      setIsConnected(true);
    } else {
      setIsConnected(false);
    }
    getAdmin();
    getTotalFeeCollected();
    getAdminFeePercentage();
  }, [address]);

  return (
    <>
      <Head>
        <title>PurplePay App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="top-0 flex flex-col w-screen bg-black">
        <div className="top-0 flex flex-row w-screen h-fit py-4 px-[10%] justify-between items-center text-primary">
          <Link href="/" className="text-xl font-bold">
            <Image src={logo} alt="PurplePay Logo" width={150} height={150} />
          </Link>
          <ConnectButton />
        </div>

        {isConnected ? (
          address === admin ? (
            <>
              {loading && <Spinner className="fixed top-[50vw] left-[50vh]" />}
              {!loading && (
                <div className="flex items-center justify-center w-screen text-xl text-white text-center">
                  Admin Page{' '}
                  Total Fee Collected - {totalFeeCollected}
                  Change Fee Percentage
                  Change Admin
                </div>
              )}
            </>
          ) : (
            <div>
              <div className="w-full max-w-screen-sm flex flex-col bg-white rounded-2xl shadow-lg items-center justify-center mx-auto my-28 border-2 border-gray-100 p-8 space-y-8">
                <p className="text-xl font-bold text-primary">Deposit Tokens</p>
                <div className="flex w-1/2 border-2 border-gray-200 cursor-pointer">
                  <span
                    className={'w-1/2 px-4 py-2 text-center' + (custom ? ' bg-white' : ' bg-fpurple text-white')}
                    onClick={() => setCustom(false)}
                  >
                    Default
                  </span>
                  <span
                    className={'w-1/2 px-4 py-2 text-center' + (!custom ? ' bg-white' : ' bg-fpurple text-white')}
                    onClick={() => setCustom(true)}
                  >
                    Custom
                  </span>
                </div>
                {custom && (
                  <div className="w-3/4 flex justify-between space-x-2">
                    <label className="mx-2 text-lg">Address</label>
                    <input
                      className="px-4"
                      type="text"
                      placeholder="0x..."
                      value={inputAddress}
                      onChange={(e) => setInputAddress(e.target.value)}
                    />
                  </div>
                )}
                <div className="w-3/4 flex justify-between space-x-2">
                  <label className="mx-2 text-lg">Enter amount</label>
                  <input
                    className="px-4"
                    type="text"
                    placeholder="0.01"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                  />
                </div>
                {!loading && (
                  <div className="flex flex-row w-full mt-3 pr-2 justify-center">
                    <button onClick={null} className="btn mt-2 w-1/2">
                      Deposit {custom ? 'Custom Token' : 'FXP'}
                    </button>
                  </div>
                )}
                {loading && <Spinner />}
              </div>
            </div>
            
          )
        ) : (
          <div className="flex items-center justify-center w-screen text-3xl text-white text-center">
            Please connect your wallet to continue
          </div>
        )}
      </div>
    </>
  );
}
